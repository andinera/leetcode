/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */

var head *ListNode
var tail *ListNode

func _mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {
    if list1 != nil && list2 != nil {
        if list1.Val < list2.Val {
            if head == nil {
                head = list1
            }
            if tail != nil {
                tail.Next = list1
            }
            tail = list1
            _mergeTwoLists(list1.Next, list2)
        } else {
            if head == nil {
                head = list2
            }
            if tail != nil {
                tail.Next = list2
            }
            tail = list2
            _mergeTwoLists(list1, list2.Next)
        }
    } else if list1 == nil {
        if tail != nil {
            tail.Next = list2
        }
    } else if list2 == nil {
        if tail != nil {
            tail.Next = list1
        }
    }

    if head != nil {
        return head
    } else if list1 == nil {
        return list2
    } else {
        return list1
    }
}

func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {
    head = nil
    tail = nil

    return _mergeTwoLists(list1, list2)
}