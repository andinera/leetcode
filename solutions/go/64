func minPathSum(grid [][]int) int {
    dp := make([][]int, len(grid))

    dp[0] = make([]int, len(grid[0]))
    dp[0][0] = grid[0][0]
    for i := 1; i < len(grid[0]); i++ {
        dp[0][i] = grid[0][i] + dp[0][i-1]
    }

    for i := 1; i < len(grid); i++ {
        dp[i] = make([]int, len(grid[i]))
        dp[i][0] = grid[i][0] + dp[i-1][0]
        for j := 1; j < len(grid[i]); j++ {
            dp[i][j] = int(math.Min(float64(dp[i][j-1]), float64(dp[i-1][j]))) + grid[i][j]
        }
    }

    return dp[len(dp)-1][len(dp[0])-1]
}