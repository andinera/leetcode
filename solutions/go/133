/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Neighbors []*Node
 * }
 */

var shelf map[int]*Node

func _cloneGraph(node *Node) *Node {
    value, exists := shelf[node.Val]
    if exists {
        return value
    }

    copy := Node{Val: node.Val}
    shelf[copy.Val] = &copy

    if node.Neighbors != nil {
        copy.Neighbors = make([]*Node, len(node.Neighbors))
        neighborIndex := 0
        for i := 0; i < len(node.Neighbors); i++ {
            copy.Neighbors[neighborIndex] = _cloneGraph(node.Neighbors[i])
            neighborIndex++
        }
    }

    return &copy
}

func cloneGraph(node *Node) *Node {
    if node == nil {
        return nil
    }

    shelf = make(map[int]*Node, 0)

    return _cloneGraph(node)
}