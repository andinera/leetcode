func minimumTotal(triangle [][]int) int {
    dp := make([][]int, len(triangle))
    dp[0] = []int{triangle[0][0]}

    for i := 1; i < len(triangle); i++ {
        dp[i] = make([]int, len(triangle[i]))
        dp[i][0] = dp[i-1][0] + triangle[i][0]
        for j := 1; j < len(triangle[i]) - 1; j++ {
            dp[i][j] = int(math.Min(float64(dp[i-1][j-1]), float64(dp[i-1][j]))) + triangle[i][j]
        }
        dp[i][len(triangle[i])-1] = dp[i-1][len(triangle[i-1])-1] + triangle[i][len(triangle[i])-1]
    }

    min := math.MaxInt
    for i := 0; i < len(dp[len(dp)-1]); i++ {
        if dp[len(dp)-1][i] < min {
            min = dp[len(dp)-1][i]
        }
    }

    return min
}