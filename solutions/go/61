/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func rotateRight(head *ListNode, k int) *ListNode {
    if head == nil {
        return nil
    }
    if head.Next == nil || k == 0 {
        return head
    }

    tempHead := head

    i := 0
    for ; head != nil; i++ {
        head = head.Next
    }
    if k % i == 0 {
        return tempHead
    }

    nodes := make([]*ListNode, i)

    head = tempHead
    for i = 0; head != nil; i++ {
        nodes[i] = head
        head = head.Next
    }

    nodes[len(nodes)-1].Next = nodes[0]
    nodes[len(nodes)-1-(k % len(nodes))].Next = nil
    return nodes[len(nodes)-(k % len(nodes))]
}