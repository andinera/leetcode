func maximalSquare(matrix [][]byte) int {
    dp := make([][]int, len(matrix))
    max := 0

    dp[0] = make([]int, len(matrix[0]))
    if matrix[0][0] == '1' {
        dp[0][0] = 1
        max = 1
    }

    for i := 1; i < len(matrix[0]); i++ {
        if matrix[0][i] == '1' {
            dp[0][i] = 1
            max = 1
        }
    }

    for i := 1; i < len(matrix); i++ {
        dp[i] = make([]int, len(matrix[i]))
        if matrix[i][0] == '1' {
            dp[i][0] = 1
            if max == 0 {
                max = 1
            }
        }
        for j := 1; j < len(matrix[0]); j++ {
            if matrix[i][j] == '1' {
                min := dp[i-1][j]
                if dp[i][j-1] < min {
                    min = dp[i][j-1]
                }
                if dp[i-1][j-1] < min {
                    min = dp[i-1][j-1]
                }
                dp[i][j] = min + 1
                if dp[i][j] > max {
                    max = dp[i][j]
                }
            }
        }
    }
    return max * max
}