/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
type BSTIterator struct {
    List *TreeNode
}

var constructionListHead *TreeNode
var constructionList *TreeNode

func _Constructor(root *TreeNode) {
    if root != nil {
        _Constructor(root.Left)
        if constructionList == nil {
            constructionList = root
            constructionListHead = root
        } else {
            constructionList.Right = root
            constructionList = root
        }
        _Constructor(root.Right)
    }
}

func Constructor(root *TreeNode) BSTIterator {   
    _Constructor(root) 
    result := BSTIterator{List: constructionListHead}
    constructionList = nil
    constructionListHead = nil
    return result
}


func (this *BSTIterator) Next() int {
    next := this.List
    this.List = this.List.Right
    return next.Val
}


func (this *BSTIterator) HasNext() bool {
    return this.List != nil
}


/**
 * Your BSTIterator object will be instantiated and called as such:
 * obj := Constructor(root);
 * param_1 := obj.Next();
 * param_2 := obj.HasNext();
 */