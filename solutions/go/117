/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Left *Node
 *     Right *Node
 *     Next *Node
 * }
 */

var levels [][]*Node

func _connect(root *Node, depth int) {
    if root != nil {
        if len(levels) <= depth {
            levels = append(levels, make([]*Node, 0))
        }
        levels[depth] = append(levels[depth], root)

        _connect(root.Left, depth+1)
        _connect(root.Right, depth+1)
    }
}

func connect(root *Node) *Node {
    levels = make([][]*Node, 0)
	_connect(root, 0)

    for i := 0; i < len(levels); i++ {
        for j := 0; j < len(levels[i])-1; j++ {
            levels[i][j].Next = levels[i][j+1]
        }
    }

    return root
}