func minDistance(word1 string, word2 string) int {
    if len(word1) == 0 || len(word2) == 0 {
        return int(math.Max(float64(len(word1)), float64(len(word2))))
    }

    dp := make([][]int, len(word2))

    dp[0] = make([]int, len(word1))
    if word1[0] != word2[0] {
        dp[0][0] = 1
    }
    match := false
    for i := 1; i < len(word1); i++ {
        dp[0][i] = dp[0][i-1]
        if match || word1[i] != word2[0] {
            dp[0][i]++
        } else {
            match = true
        }
    }

    for i := 1; i < len(word2); i++ {
        dp[i] = make([]int, len(word1))
        dp[i][0] = dp[i-1][0]
        if word1[0] != word2[i] {
            dp[i][0]++
        }
        for j := 1; j < len(word1); j++ {
            dp[i][j] = dp[i-1][j-1]
            if word1[j] != word2[i] {
                dp[i][j] = int(math.Min(float64(dp[i][j]), math.Min(float64(dp[i-1][j]), float64(dp[i][j-1])))) + 1
            }
        }
    }
    return dp[len(dp)-1][len(dp[0])-1]
}