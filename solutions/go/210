var finishableShelf map[int]bool
var prereqShelf map[int][]int
var result []int

func _canFinish(course int) bool {
    finishable, exists := finishableShelf[course]
    if exists {
        return finishable
    } else {
        requirements, preExists := prereqShelf[course]
        if preExists {
            finishableShelf[course] = false
            for i := 0; i < len(requirements); i++ {
                finishable = _canFinish(requirements[i])
                if !finishable {
                    finishableShelf[course] = false
                    return false
                }
            }
            finishableShelf[course] = true
            result = append(result, course)
            return true
        } else {
            finishableShelf[course] = true
            result = append(result, course)
            return true
        }
    }
}

func canFinish(numCourses int, prerequisites [][]int) bool {
    finishableShelf = make(map[int]bool, 0)
    prereqShelf = make(map[int][]int, 0)
    for i := 0; i < len(prerequisites); i++ {
        _, exists := prereqShelf[prerequisites[i][0]]
        if exists {
            prereqShelf[prerequisites[i][0]] = append(prereqShelf[prerequisites[i][0]], prerequisites[i][1])
        } else {
            prereqShelf[prerequisites[i][0]] = []int{prerequisites[i][1]}
        }
    }
    for i := 0; i < len(prerequisites); i++ {
        result := _canFinish(prerequisites[i][0])
        if !result {
            return false
        }
    }
    return true
}


func findOrder(numCourses int, prerequisites [][]int) []int {
    result = []int{}
    finishable := canFinish(numCourses, prerequisites)
    if !finishable {
        return []int{}
    }
    for i := 0; i < numCourses; i++ {
        found := false
        for j := 0; j < len(result); j++ {
            if result[j] == i {
                found = true
                break
            }
        }
        if !found {
            result = append(result, i)
        }
    }
    return result
}