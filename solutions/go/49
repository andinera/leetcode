func groupAnagrams(strs []string) [][]string {
    shelf := make(map[string][]string)
    numUnique := 0

    for i := 0; i < len(strs); i++ {
        r := []rune(strs[i])
        sort.Slice(r, func(i, j int) bool {
            return r[i] < r[j]
        })
        sortedString := string(r)
        value, exists := shelf[sortedString]
        if exists {
            shelf[sortedString] = append(value, strs[i])
        } else {
            numUnique++
            shelf[sortedString] = []string{strs[i]}
        }
    }

    result := make([][]string, numUnique)
    resultIndex := 0
    for _, value := range shelf {
        result[resultIndex] = value
        resultIndex++
    }

    return result
}