var shelf map[int]bool
var preShelf map[int][]int

func _canFinish(course int) bool {
    finishable, exists := shelf[course]
    if exists {
        return finishable
    } else {
        requirements, preExists := preShelf[course]
        if preExists {
            shelf[course] = false
            for i := 0; i < len(requirements); i++ {
                finishable = _canFinish(requirements[i])
                if !finishable {
                    shelf[course] = false
                    return false
                }
            }
            shelf[course] = true
            return true
        } else {
            return true
        }
    }
}

func canFinish(numCourses int, prerequisites [][]int) bool {
    shelf = make(map[int]bool, 0)
    preShelf = make(map[int][]int, 0)
    for i := 0; i < len(prerequisites); i++ {
        _, exists := preShelf[prerequisites[i][0]]
        if exists {
            preShelf[prerequisites[i][0]] = append(preShelf[prerequisites[i][0]], prerequisites[i][1])
        } else {
            preShelf[prerequisites[i][0]] = []int{prerequisites[i][1]}
        }
    }
    for i := 0; i < len(prerequisites); i++ {
        result := _canFinish(prerequisites[i][0])
        if !result {
            return false
        }
    }
    return true
}