func addBinary(a string, b string) string {
    runes := make([]rune, int(math.Max(float64(len(a)), float64(len(b)))) + 1)
    var carryOver rune
    var nextDigit rune
    for i := 0; i < int(math.Min(float64(len(a)), float64(len(b)))); i++ {
        sum := rune(a[len(a)-i-1] + b[len(b)-i-1])
        nextDigit = (sum + carryOver) % 2   // 96 == 0, 97 == 1, 98 == 0, 99 == 1
        runes[len(runes)-i-1] = nextDigit
        if sum + carryOver >= 98 {
            carryOver = 1
        } else {
            carryOver = 0
        }
    }

    // fmt.Println("test3", runes)

    var sum rune
    for i := 0; i < int(math.Abs(float64(len(a)) - float64(len(b)))); i++ {
        if len(a) > len(b) {
            sum = rune(a[len(a)-i-1-len(b)])
        } else {
            sum = rune(b[len(b)-i-1-len(a)])
        }
        nextDigit = (sum + carryOver) % 2   // 48 == 0, 49 == 1, 50 == 0
        runes[len(runes)-i-1-int(math.Min(float64(len(a)), float64(len(b))))] = nextDigit
        if sum + carryOver >= 50 {
            carryOver = 1
        } else {
            carryOver = 0
        }
    }

    if carryOver == 1 {
        runes[0] = carryOver
    }

    // fmt.Println("test5", runes)

    var result strings.Builder
    leadingZeros := true
    var runeString string
	for _, r := range runes {
        runeString = fmt.Sprintf("%d", r)
        if leadingZeros && runeString == "0" {
            continue
        } else {
            leadingZeros = false
		    result.WriteString(runeString)
        }
	}
    resultString := result.String()
    if len(resultString) == 0 {
        return "0"
    } else {
        return resultString
    }
}